variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   SAST_EXCLUDED_ANALYZERS: "spotbugs"

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
   - build
   - test
   - release
   - notify
   - deploy

build:
   stage: build
   script:
      - cd frontend
      - npm install
      - npm run build
      - cd ..
      - mkdir sausage-store-${VERSION}
      - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтенда  
   artifacts:
      paths:
         - sausage-store-${VERSION}/public_html
   rules:
      - changes:
           - frontend/*

release:
   stage: release
   script:
      - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}
      - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL_FRONT}/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
   rules:
      - changes:
           - frontend/*

sonarqube-frontend-sast:
   stage: test
   image:
      name: sonarsource/sonar-scanner-cli:latest
      entrypoint: [""]
   variables:
      SONAR_USER_HOME: "${CI_PROJECT_DIR}/.m2/frontend"
      GIT_DEPTH: "0"
   script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
      -Dsonar.projectName=${SONAR_FRONTEND}
   rules:
      - changes:
           - frontend/*

notify-slack: # задача с именем upload-release
   stage: notify
   script:
    - > # сохранение артефакта в package registry
      curl -X POST -H "Content-type: application/json"
      -d "{\"text\": \"Вышла новая версия frontend сосисочной — ${VERSION}. Скачать frontend можно по ссылке — ${NEXUS_REPO_URL_FRONT}/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz\" }" https://hooks.slack.com/services/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
   rules:
      - changes:
           - frontend/*



deploy:
  stage: deploy
  before_script:
      #устанавливаем ssh-agent для удобства аутентификации по ssh
      - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval $(ssh-agent -s)
      #сохраняем сгенеренный ранее приватный ключ для раннера
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 600 ~/.ssh
      - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL_FRONT}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./frontend/deploy.sh
